20170327~20170402 노트

README.md
ForestDB main features
- Keys and values are treated as an arbitrary binary.
- Applications can supply a custom compare function to support a customized key order.
- Write-Ahead Logging (WAL) and its in-memory index are used to reduce the main index lookup / update overhead.
- Multi-Version Concurrency Control (MVCC) support and append-only storage layer.
- Multiple snapshot instances can be created from a given ForestDB instance to provide different views of database.
- Rollback is supported to revert the database to a specific point.
- Ranged iteration by keys or sequence numbers is supported for a partial or full range lookup operation.
- Manual or auto compaction can be configured per ForestDB database file.
- Transactional support with read committed or read uncomitted isolation level.

INSTALL.md
- ForestDB supports an option to compress a document body using Snappy
sudo apt-get install libsnappy-dev
- use the asynchronous I/O library `libaio` on Linux if it is available, to submit multiple I/O requests at once to speed up fetching non-resident blocks from disk. As of this time, we use `libaio` to read data blocks from the old file during the compaction.
sudo apt-get install libaio-devel
- to provide the build support for a wide range of platforms
sudo apt-get install cmake

make all 하고 make test함 

* To enable code-coverage reporting for tests, install ```gcov``` and ```lcov``` for your OS. (Windows not supported).  Also make sure build type is **Coverage**

     `cmake -DCMAKE_BUILD_TYPE=Coverage ../`

     `make all`

     `make test_coverage`

    This target will run the tests and output coverage report to ```<repo>/coverage/index.html```

* To enable valgrind tests, install ```valgrind``` for your OS. (Windows not supported).  Also make sure build type is **Valgrind**

     `cmake -DCMAKE_BUILD_TYPE=Valgrind ../`

     `make all`

     `make test_valgrind`

    This target will run the tests and output the memory report to the console

.lat 파일은???


